// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.3.0
// LVGL version: 8.3.6
// Project name: ae_52mm_gauge

#include "ui.h"
#include "ui_helpers.h"
#include "Arduino.h"

extern String SSID;
extern String PWD;
extern bool disableWiFi;
extern bool settingsState;

///////////////////// VARIABLES ////////////////////

// SCREEN: ui_bootInitialScreen
void ui_bootInitialScreen_screen_init(void);
lv_obj_t *ui_bootInitialScreen;
lv_obj_t *ui_Spinner1;
void ui_event_wifiIcon( lv_event_t * e);
lv_obj_t *ui_wifiIcon;
void ui_event_settingsIcon( lv_event_t * e);
lv_obj_t *ui_settingsIcon;
lv_obj_t *ui_feedbackLabel;
lv_obj_t *ui_aeLandingIcon;
lv_obj_t *ui_SSIDLabel;
void ui_event_SSIDInputText( lv_event_t * e);
lv_obj_t *ui_SSIDInputText;
lv_obj_t *ui_SSIDPasswordLabel;
void ui_event_SSIDPasswordInputText( lv_event_t * e);
lv_obj_t *ui_SSIDPasswordInputText;
void ui_event_Keyboard( lv_event_t * e);
lv_obj_t *ui_Keyboard;
void ui_event_landingBackButton( lv_event_t * e);
lv_obj_t *ui_landingBackButton;

// SCREEN: ui_batteryScreen
void ui_batteryScreen_screen_init(void);
lv_obj_t *ui_batteryScreen;
lv_obj_t *ui_SBattVArc;
lv_obj_t *ui_SA1Arc;
lv_obj_t *ui_HBattVArc;
lv_obj_t *ui_HA2Arc;
lv_obj_t *ui_battVLabelSensor;
lv_obj_t *ui_battALabelSensor;
lv_obj_t *ui_batteryVLabel;
lv_obj_t *ui_batteryALabel;
lv_obj_t *ui_startBatteryLabel;
lv_obj_t *ui_batteryIcon;
void ui_event_aeIconBatteryScreen1( lv_event_t * e);
lv_obj_t *ui_aeIconBatteryScreen1;

// SCREEN: ui_oilScreen
void ui_oilScreen_screen_init(void);
lv_obj_t *ui_oilScreen;
lv_obj_t *ui_oilTemp;
lv_obj_t *ui_oilPressure;
lv_obj_t *ui_oilTempLabelSensor;
lv_obj_t *ui_oilPressureLabelSensor;
lv_obj_t *ui_oilTempCLabel;
lv_obj_t *ui_oilTempPressureLabel;
void ui_event_aeOilIconScreen( lv_event_t * e);
lv_obj_t *ui_aeOilIconScreen;
lv_obj_t *ui_oilIcon;

// SCREEN: ui_coolantScreen
void ui_coolantScreen_screen_init(void);
lv_obj_t *ui_coolantScreen;
lv_obj_t *ui_coolantTemp;
lv_obj_t *ui_coolantPressure;
lv_obj_t *ui_coolantTempLabelSensor;
lv_obj_t *ui_coolantPressureLabelSensor;
lv_obj_t *ui_coolantTempCLabel;
lv_obj_t *ui_coolantTempPressureLabel;
void ui_event_coolantOilIconScreen( lv_event_t * e);
lv_obj_t *ui_coolantOilIconScreen;
lv_obj_t *ui_coolantIcon;

// SCREEN: ui_turboExhaustScreen
void ui_turboExhaustScreen_screen_init(void);
lv_obj_t *ui_turboExhaustScreen;
lv_obj_t *ui_egtTemp;
lv_obj_t *ui_turboPressure;
lv_obj_t *ui_egtTempLabelSensor;
lv_obj_t *ui_turboPressureLabelSensor;
lv_obj_t *ui_egtTempCLabel;
lv_obj_t *ui_turboTempPressureLabel;
void ui_event_egtIconScreen( lv_event_t * e);
lv_obj_t *ui_egtIconScreen;
lv_obj_t *ui_turboIcon;
lv_obj_t *ui____initial_actions0;
const lv_img_dsc_t *ui_imgset_1899260417[1] = {&ui_img_501072417};
const lv_img_dsc_t *ui_imgset_154589670[1] = {&ui_img_2930172};
const lv_img_dsc_t *ui_imgset_1037587769[1] = {&ui_img_2056808699};
const lv_img_dsc_t *ui_imgset_326682357[1] = {&ui_img_1105680357};
const lv_img_dsc_t *ui_imgset_1493273696[1] = {&ui_img_1209853138};
const lv_img_dsc_t *ui_imgset_23834059[1] = {&ui_img_807091229};
const lv_img_dsc_t *ui_imgset_2073783661[1] = {&ui_img_2104900491};
const lv_img_dsc_t *ui_imgset_2029485955[1] = {&ui_img_943648365};
const lv_img_dsc_t *ui_imgset_ae_white_[1] = {&ui_img_ae_white_128_png};

bool SSIDField = false;
bool SSIDPasswordField = false;
extern bool SSIDUpdated;
extern bool SSIDPasswordUpdated;

///////////////////// TEST LVGL SETTINGS ////////////////////
#if LV_COLOR_DEPTH != 16
    #error "LV_COLOR_DEPTH should be 16bit to match SquareLine Studio's settings"
#endif
#if LV_COLOR_16_SWAP !=0
    #error "LV_COLOR_16_SWAP should be 0 to match SquareLine Studio's settings"
#endif

///////////////////// ANIMATIONS ////////////////////

///////////////////// FUNCTIONS ////////////////////
void ui_event_wifiIcon( lv_event_t * e) {
    lv_event_code_t event_code = lv_event_get_code(e);lv_obj_t * target = lv_event_get_target(e);
if ( event_code == LV_EVENT_PRESSED) {
      toggleWiFi( e );
}
}
void ui_event_settingsIcon( lv_event_t * e) {
    lv_event_code_t event_code = lv_event_get_code(e);lv_obj_t * target = lv_event_get_target(e);
if ( event_code == LV_EVENT_PRESSED) {
      settingsButtonPressedFunction( e );
}
}
void ui_event_SSIDInputText( lv_event_t * e) {
    lv_event_code_t event_code = lv_event_get_code(e);lv_obj_t * target = lv_event_get_target(e);
    if ( event_code == LV_EVENT_PRESSED) {

        if (SSID != "none") // ToDo: not working
        {
            lv_textarea_set_placeholder_text(ui_SSIDInputText, SSID.c_str());
        }  
        SSIDField = true;
        _ui_keyboard_set_target(ui_Keyboard,  ui_SSIDInputText);
        lv_obj_set_y( ui_SSIDLabel, -138 );
        lv_obj_set_y( ui_SSIDInputText, -98 );
        lv_obj_add_flag(ui_SSIDPasswordLabel, LV_OBJ_FLAG_HIDDEN);
        lv_obj_add_flag(ui_SSIDPasswordInputText, LV_OBJ_FLAG_HIDDEN);
        lv_obj_add_flag(ui_landingBackButton, LV_OBJ_FLAG_HIDDEN);
        _ui_flag_modify( ui_Keyboard, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
    }
}
void ui_event_SSIDPasswordInputText( lv_event_t * e) {
    lv_event_code_t event_code = lv_event_get_code(e);lv_obj_t * target = lv_event_get_target(e);
    if ( event_code == LV_EVENT_PRESSED) 
    {
        if (PWD != "none") 
        {
            lv_textarea_set_placeholder_text(ui_SSIDPasswordInputText, PWD.c_str());
        }  
        SSIDPasswordField = true;
        _ui_keyboard_set_target(ui_Keyboard,  ui_SSIDPasswordInputText);
        lv_obj_set_y( ui_SSIDPasswordLabel, -138 );
        lv_obj_set_y( ui_SSIDPasswordInputText, -98 );
        lv_obj_add_flag(ui_SSIDLabel, LV_OBJ_FLAG_HIDDEN);
        lv_obj_add_flag(ui_SSIDInputText, LV_OBJ_FLAG_HIDDEN);
        lv_obj_add_flag(ui_landingBackButton, LV_OBJ_FLAG_HIDDEN);
        _ui_flag_modify( ui_Keyboard, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
    }
}
void ui_event_Keyboard( lv_event_t * e) 
{
    lv_event_code_t event_code = lv_event_get_code(e);lv_obj_t * target = lv_event_get_target(e);
    if ( event_code == LV_EVENT_READY) 
    {
        _ui_flag_modify( ui_Keyboard, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);

        if (SSIDField)
        {
            LV_LOG_USER("Saving SSID...");
            SSID = lv_textarea_get_text(ui_SSIDInputText); 
            SSIDField = false;
            SSIDUpdated = true;
        }
        else if (SSIDPasswordField)
        {
            LV_LOG_USER("Saving Password...");
            PWD = lv_textarea_get_text(ui_SSIDPasswordInputText);
            SSIDPasswordField = false;
            SSIDPasswordUpdated = true;
        }
        
        if (SSIDUpdated && SSIDPasswordUpdated)
        {
            lv_obj_set_y( ui_feedbackLabel, -125 );
            lv_obj_set_y( ui_SSIDLabel, -90 );
            lv_obj_set_y( ui_SSIDInputText, -58 );
            lv_obj_set_y( ui_SSIDPasswordLabel, 15 );
            lv_obj_set_y( ui_SSIDPasswordInputText, 48 );

            lv_obj_add_flag(ui_SSIDInputText, LV_OBJ_FLAG_HIDDEN);
            lv_obj_add_flag(ui_SSIDPasswordInputText, LV_OBJ_FLAG_HIDDEN);
            lv_obj_add_flag(ui_SSIDLabel, LV_OBJ_FLAG_HIDDEN);
            lv_obj_add_flag(ui_SSIDPasswordLabel, LV_OBJ_FLAG_HIDDEN);
            lv_obj_add_flag(ui_landingBackButton, LV_OBJ_FLAG_HIDDEN);

            lv_obj_clear_flag(ui_wifiIcon, LV_OBJ_FLAG_HIDDEN);
            lv_obj_clear_flag(ui_aeLandingIcon, LV_OBJ_FLAG_HIDDEN);
            lv_obj_clear_flag(ui_settingsIcon, LV_OBJ_FLAG_HIDDEN);

            lv_obj_clear_flag(ui_Spinner1, LV_OBJ_FLAG_HIDDEN);
            _ui_label_set_property(ui_feedbackLabel, _UI_LABEL_PROPERTY_TEXT, "");
            SSIDUpdated = false;
            SSIDPasswordUpdated = false;
            settingsState = false;
        } 
        else if ((SSIDUpdated && !SSIDPasswordUpdated) || (!SSIDUpdated && SSIDPasswordUpdated)) //if one or the other but not both
        {
            _ui_flag_modify( ui_Keyboard, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
            lv_obj_clear_flag(ui_SSIDPasswordLabel, LV_OBJ_FLAG_HIDDEN);
            lv_obj_clear_flag(ui_SSIDPasswordInputText, LV_OBJ_FLAG_HIDDEN);
            lv_obj_clear_flag(ui_SSIDLabel, LV_OBJ_FLAG_HIDDEN);
            lv_obj_clear_flag(ui_SSIDInputText, LV_OBJ_FLAG_HIDDEN);
            lv_obj_clear_flag(ui_landingBackButton, LV_OBJ_FLAG_HIDDEN);

            lv_obj_set_y( ui_feedbackLabel, -125 );
            lv_obj_set_y( ui_SSIDLabel, -90 );
            lv_obj_set_y( ui_SSIDInputText, -58 );
            lv_obj_set_y( ui_SSIDPasswordLabel, 15 );
            lv_obj_set_y( ui_SSIDPasswordInputText, 48 );
            lv_obj_set_y( ui_feedbackLabel, -170 );
        }
    }
    if ( event_code == LV_EVENT_CANCEL) {
        _ui_flag_modify( ui_Keyboard, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
        lv_obj_clear_flag(ui_SSIDPasswordLabel, LV_OBJ_FLAG_HIDDEN);
        lv_obj_clear_flag(ui_SSIDPasswordInputText, LV_OBJ_FLAG_HIDDEN);
        lv_obj_clear_flag(ui_SSIDLabel, LV_OBJ_FLAG_HIDDEN);
        lv_obj_clear_flag(ui_SSIDInputText, LV_OBJ_FLAG_HIDDEN);
        lv_obj_clear_flag(ui_landingBackButton, LV_OBJ_FLAG_HIDDEN);

        lv_obj_set_y( ui_feedbackLabel, -125 );
        lv_obj_set_y( ui_SSIDLabel, -90 );
        lv_obj_set_y( ui_SSIDInputText, -58 );
        lv_obj_set_y( ui_SSIDPasswordLabel, 15 );
        lv_obj_set_y( ui_SSIDPasswordInputText, 48 );
        lv_obj_set_y( ui_feedbackLabel, -170 );

        SSIDPasswordField = false;
        SSIDField = false;
    }
}

void ui_event_landingBackButton( lv_event_t * e) {
    lv_event_code_t event_code = lv_event_get_code(e);lv_obj_t * target = lv_event_get_target(e);
if ( event_code == LV_EVENT_PRESSED) {
      landingBackButtonPressedFunction( e );
}
}
void ui_event_aeIconBatteryScreen1( lv_event_t * e) {
    lv_event_code_t event_code = lv_event_get_code(e);lv_obj_t * target = lv_event_get_target(e);
if ( event_code == LV_EVENT_PRESSED) {
      _ui_screen_change( ui_bootInitialScreen, LV_SCR_LOAD_ANIM_MOVE_RIGHT, 500, 0);
}
}
void ui_event_aeOilIconScreen( lv_event_t * e) {
    lv_event_code_t event_code = lv_event_get_code(e);lv_obj_t * target = lv_event_get_target(e);
if ( event_code == LV_EVENT_PRESSED) {
      _ui_screen_change( ui_bootInitialScreen, LV_SCR_LOAD_ANIM_MOVE_RIGHT, 500, 0);
}
}
void ui_event_coolantOilIconScreen( lv_event_t * e) {
    lv_event_code_t event_code = lv_event_get_code(e);lv_obj_t * target = lv_event_get_target(e);
if ( event_code == LV_EVENT_PRESSED) {
      _ui_screen_change( ui_bootInitialScreen, LV_SCR_LOAD_ANIM_MOVE_RIGHT, 500, 0);
}
}
void ui_event_egtIconScreen( lv_event_t * e) {
    lv_event_code_t event_code = lv_event_get_code(e);lv_obj_t * target = lv_event_get_target(e);
if ( event_code == LV_EVENT_PRESSED) {
      _ui_screen_change( ui_bootInitialScreen, LV_SCR_LOAD_ANIM_MOVE_RIGHT, 500, 0);
}
}

///////////////////// SCREENS ////////////////////

void ui_init( void )
{
lv_disp_t *dispp = lv_disp_get_default();
lv_theme_t *theme = lv_theme_default_init(dispp, lv_palette_main(LV_PALETTE_BLUE), lv_palette_main(LV_PALETTE_RED), false, LV_FONT_DEFAULT);
lv_disp_set_theme(dispp, theme);
ui_bootInitialScreen_screen_init();
ui_batteryScreen_screen_init();
ui_oilScreen_screen_init();
ui_coolantScreen_screen_init();
ui_turboExhaustScreen_screen_init();
ui____initial_actions0 = lv_obj_create(NULL);
lv_disp_load_scr( ui_bootInitialScreen);
}
